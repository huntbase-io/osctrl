# User to run nginx as. It changes based on the host.
# Ubuntu: www-data
# CentOS: nginx
# Docker: nginx
user nginx;

worker_processes auto;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
# Ubuntu: /etc/nginx/modules-enabled/*.conf;
# CentOS: /usr/share/nginx/modules/*.conf;
include /usr/share/nginx/modules/*.conf;

events {
  worker_connections 1024;
}

http {
  ##
  # Logging Settings
  ##
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log;
  error_log   /var/log/nginx/error.log;

  ##
  # Performance Settings
  ##

  # copies data between one FD and other from within the kernel
  # faster than read() + write()
  sendfile              on;

  # send headers in one piece, it is better than sending them one by one
  tcp_nopush            on;

  # don't buffer data sent, good for small data bursts in real time
  tcp_nodelay on;

  # allow the server to close connection on non responding client, this will free up memory
  reset_timedout_connection on;

  # request timed out -- default 60
  client_body_timeout 10;

  # if client stop responding, free up memory -- default 60
  send_timeout 2;

  # server will close connection after this time -- default 75
  keepalive_timeout 30;

  ##
  # Random Settings
  ##
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  # Limit size of request body
  client_max_body_size 20M;

  # Do not send nginx version number in error pages or server header
  server_tokens off;
  server_name_in_redirect off;

  # Passive protections
  add_header X-XSS-Protection "1; mode=block";
  add_header X-Content-Type-Options nosniff;

  # CSP headers
  add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self'; frame-src 'self'; object-src 'none'";

  # Listen to 80, redirect to HTTPS
  server {
    listen 80;
    rewrite ^ https://$host$request_uri? permanent;
  }

  ##
  # http://nginx.org/en/docs/ngx_core_module.html#include
  ##
  include /etc/nginx/conf.d/*.conf;
  include /etc/nginx/sites-enabled/*;
}
